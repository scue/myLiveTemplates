<templateSet group="Android-Scue">
  <template name="dialog" value="new AlertDialog.Builder($className$.this)&#10;// 设定布局&#10;        .setView(dialogView)&#10;        // 设定‘标题’&#10;        .setTitle(&quot;Title&quot;)&#10;        // 设定‘内容’&#10;        .setMessage(&quot;Message&quot;)&#10;        // 设定‘确定’&#10;        .setPositiveButton(&quot;OK&quot;, new DialogInterface.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(DialogInterface dialog, int which) {&#10;                //do something&#10;            }&#10;        })&#10;        // 设定‘取消’&#10;        .setNegativeButton(&quot;Cancel&quot;, new DialogInterface.OnClickListener() {&#10;&#10;            @Override&#10;            public void onClick(DialogInterface dialog, int which) {&#10;                //do something&#10;            }&#10;        })&#10;        // 最后显示&#10;        .show();&#10;" toReformat="false" toShortenFQNames="true">
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="sharedPref" value="SharedPreferences $name$ = $className$.this.getSharedPreferences(&quot;$name$&quot;, MODE_PRIVATE);&#10;// Put&#10;Editor $name$Editor = $name$.edit();&#10;$name$Editor.putString(&quot;front_host&quot;, &quot;200.200.75.195&quot;);&#10;$name$Editor.commit();&#10;// Get&#10;String front_host = $name$.getString(&quot;front_host&quot;, null);" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="inflateView" value="LayoutInflater $name$ = (LayoutInflater) $className$.this&#10;&#9;&#9;&#9;&#9;.getSystemService(LAYOUT_INFLATER_SERVICE);&#10;View $viewName$ = $name$.inflate(R.layout.$viewLayout$, null);" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="viewName" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="viewLayout" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="drawableToBitmap" value="Bitmap $name$ = BitmapFactory.decodeResource($className$.this.getResources(),R.drawable.$byId$);" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="className" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="byId" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="broadcastReciver" value="// Define BroadcastReceiver&#10;BroadcastReceiver $name$ = new BroadcastReceiver() {&#10;    public void onReceive(Context context, Intent intent){&#10;        String action = intent.getAction();&#10;        if(&quot;com.my.action&quot;.equals(action)){&#10;            // do something here&#10;        }&#10;    }&#10;};&#10;// Register BroadcastReceiver&#10;registerReceiver($name$, new IntentFilter(&quot;com.my.action&quot;));" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="getBitmapFromUrl" value="private Bitmap getBitmapFromUrl(String urlString) {&#10;    InputStream inputStream = null;&#10;    Bitmap bitmap;&#10;    try {&#10;        URL url = new URL(urlString);&#10;        HttpURLConnection connection = (HttpURLConnection) url.openConnection();&#10;        inputStream = connection.getInputStream();&#10;        bitmap = BitmapFactory.decodeStream(inputStream);&#10;        connection.disconnect();&#10;        return bitmap;&#10;    } catch (IOException e) {&#10;        e.printStackTrace();&#10;    } finally {&#10;        try {&#10;            inputStream.close();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    return null;&#10;}" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="isOnline" value="public static boolean isOnline(Context context){&#10;    ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(CONNECTIVITY_SERVICE);&#10;    NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();&#10;    if (networkInfo != null &amp;&amp; networkInfo.isConnectedOrConnecting())&#10;        return true;&#10;    return false;&#10;}" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="countdownTimer" value="public class $MyTimer$ extends CountDownTimer {&#10;&#10;    public $MyTimer$(long millisInFuture, long countDownInterval) {&#10;        super(millisInFuture, countDownInterval);&#10;    }&#10;&#10;    public void onFinish() {&#10;        Log.i(TAG, &quot;onFinish: &quot;);&#10;    }&#10;&#10;    public void onTick(long millisUntilFinished) {&#10;        Log.i(TAG, &quot;onTick: millisUntilFinished = &quot; + millisUntilFinished);&#10;    }&#10;}" toReformat="false" toShortenFQNames="true">
    <variable name="MyTimer" expression="completeSmart()" defaultValue="&quot;MyTimer&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="autocompleteTextView" value="AutoCompleteTextView $autoCompleteTextView$ = (AutoCompleteTextView) findViewById(R.id.$autocmpTextView$);&#10;String[] $strings$ = new String[] {&quot;complete1&quot;, &quot;compute&quot;, &quot;category&quot;, &quot;date&quot;, &quot;dag&quot;, &quot;doge&quot;, &quot;pree&quot;, &quot;people&quot;};&#10;ArrayAdapter&lt;String&gt; $arrayAdapter$ = new ArrayAdapter&lt;String&gt;(this, android.R.layout&#10;        .simple_dropdown_item_1line, $strings$);&#10;$autoCompleteTextView$.setAdapter($arrayAdapter$);&#10;$autoCompleteTextView$.setThreshold(1);" toReformat="false" toShortenFQNames="true">
    <variable name="autoCompleteTextView" expression="completeSmart()" defaultValue="&quot;autoCompleteTextView&quot;" alwaysStopAt="true" />
    <variable name="autocmpTextView" expression="completeSmart()" defaultValue="&quot;autocmpTextView&quot;" alwaysStopAt="true" />
    <variable name="strings" expression="completeSmart()" defaultValue="&quot;strings&quot;" alwaysStopAt="true" />
    <variable name="arrayAdapter" expression="completeSmart()" defaultValue="&quot;arrayAdapter&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_DECLARATION" value="false" />
    </context>
  </template>
</templateSet>